{"version":3,"sources":["components/Pagination/Pagination.tsx","utils.ts","App.tsx","index.tsx"],"names":["Pagination","total","perPage","currentPage","onPageChange","getArrayItems","numbersOfpages","Math","ceil","pagesLinksArray","from","to","numbers","n","push","getNumbers","className","classNames","disabled","href","onClick","map","page","active","item","App","useState","setCurrentpage","setPerpage","fromINumber","setFromNumber","toNumber","setTonumber","id","value","onChange","e","target","htmlFor","numberOfItems","currentPageNumber","totalNumber","ReactDOM","render","document","getElementById"],"mappings":"sNAIaA,EAA6B,SAAH,GAMhC,IALLC,EAAK,EAALA,MACAC,EAAO,EAAPA,QACAC,EAAW,EAAXA,YACAC,EAAY,EAAZA,aACAC,EAAa,EAAbA,cAEMC,EAAiBC,KAAKC,KAAKP,EAAQC,GACnCO,ECZD,SAAoBC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,EDKiBG,CAAW,EAAGT,GAmBtC,OACE,qCACE,qBAAIU,UAAU,aAAY,UACxB,oBAAIA,UACFC,IAAW,YAAa,CAAEC,SAA0B,IAAhBf,IACrC,SAEC,mBACE,UAAQ,WACRa,UAAU,YACVG,KAAK,QACL,gBAA+B,IAAhBhB,EACfiB,QAAS,kBAAMhB,EAAaD,EAAc,IAAG,oBAMhDM,EAAgBY,KAAI,SAAAC,GAAI,OACvB,oBAEEN,UACEC,IAAW,YAAa,CAAEM,OAAQpB,IAAgBmB,IACnD,SAED,mBAEE,UAAQ,WACRN,UAAU,YACVG,KAAI,WAAMG,GACVF,QAAS,kBAAMhB,EAAakB,IAAM,SAEjCA,GANIA,IANFA,MAiBT,oBAAIN,UACFC,IAAW,YAAa,CAAEC,SAAUf,IAAgBG,IACrD,SAEC,mBACE,UAAQ,WACRU,UAAU,YACVG,KAAK,QACL,gBAAehB,IAAgBG,EAC/Bc,QAAS,kBAAMhB,EAAaD,EAAc,IAAG,uBAMnD,6BAEIE,EAAcH,EAASC,EAAaF,GACjCoB,KAAI,SAAAG,GAAI,OACP,oBAAe,UAAQ,OAAM,wBAAUA,IAA9BA,YE9EVC,EAAgB,WAC3B,MAAsCC,mBAAS,GAAE,mBAA1CvB,EAAW,KAAEwB,EAAc,KAClC,EAA8BD,mBAAS,GAAE,mBAAlCxB,EAAO,KAAE0B,EAAU,KAC1B,EAAgBF,mBAAS,IAAlBzB,EAAqB,iBAAhB,GACZ,EAAqCyB,mBAAS,GAAE,mBAAzCG,EAAW,KAAEC,EAAa,KACjC,EAAgCJ,mBAASxB,GAAQ,mBAA1C6B,EAAQ,KAAEC,EAAW,KA4B5B,OACE,sBAAKhB,UAAU,YAAW,UACxB,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAAM,wBACvBb,EAAW,mBAAW0B,EAAW,cAAME,EAAQ,eAAO9B,EAAK,OAGtE,sBAAKe,UAAU,iBAAgB,UAC7B,qBAAKA,UAAU,0BAAyB,SACtC,yBACE,UAAQ,kBACRiB,GAAG,kBACHjB,UAAU,eACVkB,MAAOhC,EACPiC,SAAU,SAACC,GACTR,GAAYQ,EAAEC,OAAOH,OACrBP,EAAe,IACf,UAEF,wBAAQO,MAAM,IAAG,eACjB,wBAAQA,MAAM,IAAG,eACjB,wBAAQA,MAAM,KAAI,gBAClB,wBAAQA,MAAM,KAAI,qBAItB,uBAAOI,QAAQ,kBAAkBtB,UAAU,qBAAoB,+BAIjE,cAAC,EAAU,CACTf,MAAOA,EACPC,QAASA,EACTC,YAAaA,EACbC,aA7De,SAACkB,GAChBnB,IAAgBmB,GAClBK,EAAeL,IA4DbjB,cAxDkC,SACtCkC,EACAC,EACAC,GAEA,IAAM7B,EAAU,GACVF,EAAO6B,EAAgBC,EAAoBD,EAAgB,EAC3D5B,EAAK4B,EAAgBC,EAAoBC,EAC3CA,EAAcF,EAAgBC,EAElCV,EAAcpB,GACdsB,EAAYrB,GAEZ,IAAK,IAAIE,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,SCpCX8B,IAASC,OAAO,cAAC,EAAG,IAAKC,SAASC,eAAe,W","file":"static/js/main.c7475de2.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { Page } from '../../types/Page';\nimport { getNumbers } from '../../utils';\n\nexport const Pagination: React.FC<Page> = ({\n  total,\n  perPage,\n  currentPage,\n  onPageChange,\n  getArrayItems,\n}) => {\n  const numbersOfpages = Math.ceil(total / perPage);\n  const pagesLinksArray = getNumbers(1, numbersOfpages);\n\n  // function getArrayOfNumbersOfItemsPerPage(\n  //   numberOfItems: number,\n  //   currentPageNumber: number,\n  //   totalNumber: number,\n  // ): number[] {\n  //   const numbers = [];\n  //   const from = numberOfItems * currentPageNumber - numberOfItems + 1;\n  //   const to = numberOfItems * currentPageNumber > totalNumber\n  //     ? totalNumber : numberOfItems * currentPageNumber;\n\n  //   for (let n = from; n <= to; n += 1) {\n  //     numbers.push(n);\n  //   }\n\n  //   return numbers;\n  // }\n\n  return (\n    <>\n      <ul className=\"pagination\">\n        <li className={\n          classNames('page-item', { disabled: currentPage === 1 })\n        }\n        >\n          <a\n            data-cy=\"prevLink\"\n            className=\"page-link\"\n            href=\"#prev\"\n            aria-disabled={currentPage !== 1}\n            onClick={() => onPageChange(currentPage - 1)}\n          >\n            «\n          </a>\n        </li>\n\n        {pagesLinksArray.map(page => (\n          <li\n            key={page}\n            className={\n              classNames('page-item', { active: currentPage === page })\n            }\n          >\n            <a\n              key={page}\n              data-cy=\"pageLink\"\n              className=\"page-link\"\n              href={`#${page}`}\n              onClick={() => onPageChange(page)}\n            >\n              {page}\n            </a>\n          </li>\n        ))}\n\n        <li className={\n          classNames('page-item', { disabled: currentPage === numbersOfpages })\n        }\n        >\n          <a\n            data-cy=\"nextLink\"\n            className=\"page-link\"\n            href=\"#next\"\n            aria-disabled={currentPage === numbersOfpages}\n            onClick={() => onPageChange(currentPage + 1)}\n          >\n            »\n          </a>\n        </li>\n      </ul>\n      <ul>\n        {\n          getArrayItems(perPage, currentPage, total)\n            .map(item => (\n              <li key={item} data-cy=\"item\">{`Item ${item}`}</li>\n            ))\n        }\n      </ul>\n    </>\n  );\n};\n","export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import React, { useState } from 'react';\nimport './App.css';\n// import { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n// const items = getNumbers(1, 42)\n//   .map(n => `Item ${n}`);\n\nexport const App: React.FC = () => {\n  const [currentPage, setCurrentpage] = useState(1);\n  const [perPage, setPerpage] = useState(5);\n  const [total] = useState(42);\n  const [fromINumber, setFromNumber] = useState(1);\n  const [toNumber, setTonumber] = useState(perPage);\n\n  const onpageChange = (page: number): void => {\n    if (currentPage !== page) {\n      setCurrentpage(page);\n    }\n  };\n\n  const getArrayOfNumbersOfItemsPerPage = (\n    numberOfItems: number,\n    currentPageNumber: number,\n    totalNumber: number,\n  ): number[] => {\n    const numbers = [];\n    const from = numberOfItems * currentPageNumber - numberOfItems + 1;\n    const to = numberOfItems * currentPageNumber > totalNumber\n      ? totalNumber : numberOfItems * currentPageNumber;\n\n    setFromNumber(from);\n    setTonumber(to);\n\n    for (let n = from; n <= to; n += 1) {\n      numbers.push(n);\n    }\n\n    return numbers;\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (items ${fromINumber} - ${toNumber} of ${total})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={perPage}\n            onChange={(e) => {\n              setPerpage(+e.target.value);\n              setCurrentpage(1);\n            }}\n          >\n            <option value=\"3\">3</option>\n            <option value=\"5\">5</option>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n      <Pagination\n        total={total}\n        perPage={perPage}\n        currentPage={currentPage}\n        onPageChange={onpageChange}\n        getArrayItems={getArrayOfNumbersOfItemsPerPage}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}